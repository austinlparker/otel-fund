generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BountyStatus {
  NEW
  PENDING_MODERATION
  MODERATION_AUTO_REJECT
  MODERATION_AUTO_UNSURE
  MODERATION_AUTO_APPROVE
  ACTIVE
  COMPLETED
}

model Bounty {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  repoLink    String
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  status      BountyStatus @default(NEW)
  votes       Vote[]
  tags        Tag[]
  hotScore    Float        @default(0)
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  comments    Comment[]

  @@index([createdAt])
}

model Tag {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  bounties Bounty[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  userEmail String
  bounty    Bounty   @relation(fields: [bountyId], references: [id])
  bountyId  Int
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([userEmail, bountyId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  bounties      Bounty[]
  votes         Vote[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  bounty    Bounty    @relation(fields: [bountyId], references: [id])
  bountyId  Int
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
}
